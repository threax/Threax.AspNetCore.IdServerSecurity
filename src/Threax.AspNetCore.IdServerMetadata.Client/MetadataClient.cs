//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.21.6150.29665 (NJsonSchema v5.12.6149.949) (http://NSwag.org)
// </auto-generated>
//----------------------

using Newtonsoft.Json;
using System;
using System.CodeDom.Compiler;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Threax.AspNetCore.ExceptionFilter;
using Threax.AspNetCore.IdServerMetadata;

namespace Threax.AspNetCore.IdServerMetadata.Client
{
    public partial class MetadataClient : IMetadataClient
    {
        private readonly HttpClient client;

        public MetadataClient(HttpClient client)
        {
            this.client = client;
        }

        /// <summary>Get the client metadata from targetUrl.</summary>
        public async Task<ClientMetadata> ClientAsync(string baseUrl)
        {
            baseUrl = FixBaseUrl(baseUrl);
            var url = string.Format("{0}/{1}?", baseUrl, "Metadata/Client");

            using (var request = new HttpRequestMessage())
            {
                request.Method = new HttpMethod("GET");
                request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
                using (var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead).ConfigureAwait(false))
                {
                    if (!response.IsSuccessStatusCode)
                    {
                        throw new InvalidOperationException($"Could not read client from {url}");
                    }

                    var responseData_ = await response.Content.ReadAsByteArrayAsync().ConfigureAwait(false);

                    return JsonConvert.DeserializeObject<ClientMetadata>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                }
            }
        }

        /// <summary>Get the scope metadata from targetUrl.</summary>
        public async Task<ApiResourceMetadata> ScopeAsync(string baseUrl)
        {
            baseUrl = FixBaseUrl(baseUrl);
            var url = string.Format("{0}/{1}?", baseUrl, "Metadata/Scope");

            using (var request = new HttpRequestMessage())
            {
                request.Method = new HttpMethod("GET");
                request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
                using (var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead).ConfigureAwait(false))
                {
                    if (!response.IsSuccessStatusCode)
                    {
                        throw new InvalidOperationException($"Could not read client from {url}");
                    }

                    var responseData_ = await response.Content.ReadAsByteArrayAsync().ConfigureAwait(false);

                    return JsonConvert.DeserializeObject<ApiResourceMetadata>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                }
            }
        }

        /// <summary>Get the client metadata from targetUrl.</summary>
        public async Task<ClientMetadata> ClientCredentialsAsync(string baseUrl)
        {
            baseUrl = FixBaseUrl(baseUrl);
            var url = string.Format("{0}/{1}?", baseUrl, "Metadata/ClientCredentials");

            using (var request = new HttpRequestMessage())
            {
                request.Method = new HttpMethod("GET");
                request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
                using (var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead).ConfigureAwait(false))
                {
                    if (!response.IsSuccessStatusCode)
                    {
                        throw new InvalidOperationException($"Could not read client from {url}");
                    }

                    var responseData_ = await response.Content.ReadAsByteArrayAsync().ConfigureAwait(false);

                    return JsonConvert.DeserializeObject<ClientMetadata>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                }
            }
        }

        private static string FixBaseUrl(string baseUrl)
        {
            if (baseUrl.EndsWith("/") || baseUrl.EndsWith("\\"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }

            return baseUrl;
        }
    }
}